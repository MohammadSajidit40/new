1. $ git --global 
2. $ git  init
3. $ git config --global ==> (user.name "github" & user.emails"@gmail.com ")
4. 
5.  $ clear ==> (clear all windowTab)
6.  $ vim filename ==> (create the file with edit option)
     alt + :wq! ===> exit Write to {file} and exit always.
    $ touch ===> (create the file without any content)
    $ cat filename ===> (view content in file)
07. $ pwd ==> (present working directory)
08. $ cd pathway ==> chanage to directory to specific file
09. $ ls            ==> (list of file in folder or local repository)
09.1 $ git ls-files ==> (list file avalible in staging area)
     $ git log --oneline ==>(list file of commit id shows)
10. $ git init ==> ( to create local Repository)
11. $ git status  ==> ( to know status of files)
12. $ git add -a or .or file name ==> (to add the file to staging area)
    $ git add fileName; git commit -m "comment"
13. $ git commit -m "comment"==> (shift to staging to local repository)
14. $ git log ==> (register show the details regarding version control log)
    $ git log --oneline ==>(list of commit id shows)

Difference in files :- <==========================================================>
15. $ git diff filename ==> ( Find d./f in workspace to Staging area)
16. $ git diff HEAD filename  ==> (find d/f workingspace area to last commit_[local Repository]) 
17. $ git diff --staged HEAD filename  ==> (find d/f Staging area to last commit_[local Repository] ) 
18.  (workspace area to first commit_[local Repository])
     $ git log --- used to take log of commit)
     $ git diff commit code filename
19   (Staging area to first commit_[local Repository])
     $ git log ---> used to take log of commit)
     $ git diff --staged commit code
20  $ git diff commit code1  commit code2 filename --> (d/f between two d/f commit)
21 $ git diff master or test--> (d/f master & test)

Remove files :-   <=================================================================>
22. $ git rm filename ==> (remove file from both staging & working repository)
23. $ git rm r. ==> (remove all file from both staging & working repository)
24. $ git rm --cached filename ==> ( remove file from staging area)
25. rm filename ==> (remove file only from working repository)

checkout command : <===================================================================>
26.  $ git checkout --filename ====>  remove unstaged changes script 
(which are not part of stageing area but tracked files(is part of staging area & local repository)

reset :            <====================================================================>
27 $ git reset filename  ==>   (Remove changes from staging area only avaliable in working repository)

  $ git reset --mixed second_commit id ===> (remove file from stating area & avaliable at working repository)
  $ git reset --soft second_commit id  ===> (removed file from only local repository & avaliable WR & staging)
  $ git reset --hart second_commit id  ===> (removed file from only local repository, Working Repoitory & staging area)


git Branching :    <=======================================================================>
28.  $ git branch ===> show status of location
     $ git branch
29.  $ git branch branchName      ===> Create new Branch
     $ git checkout branchName    ===> Switch from current branch
     $ git checkout -b branchName ===> Create & switch to new branch

Git Merge : <=============================================================================>

30. Fast-Forward Merge     ====>    (first shift to master than merge)
    $ git merge BranchName      ====> merge the both master & branch

31. Three-way Merge        ====>    (possible of conflict)
    $ git merge BranchName      ====> merge the both master & branch
      create conflict  ==> alt + :wq!
32. graph 
    $ git log --oneline --graph
33. delete 
    $ git branch -d branchName ====> delete branch
  
34. Rebase (only use to local repository not in remote repository) 
    $ git log --oneline master      ===>

    $ git log --oneline BranchName  ===>

    $ git checkout BranchName      ====>

    $ git rebase master          ======> 

    $ git log --oneline master      ===>

    $ git log --oneline BranchName  ===>

    $ git rebase BranchName         ===> 


